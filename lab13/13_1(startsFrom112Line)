using System;
using System.Collections.Generic;
using System.Text;

namespace MyLinkedList
{
    public class ListUnderflow : Exception { }
    
    public class LinkedList // односвязный список
    {
        class Node
        {
            public double Value { get; set; }
            public Node Next { get; set; }
            public Node(double item)
            {
                Value = item;
                Next = null;
            }
        }
        Node head = null;
        Node tail = null;
        int count;
        
        public void Add(double item)
        {
            Node node = new Node(item);
            if (head == null)
                head = node;
            else
                tail.Next = node;
            tail = node;
            count++;
        }
        
        public void AppendFirst(double item)
        {
            Node node = new Node(item);
            node.Next = head;
            head = node;
            if (count == 0)
                tail = head;
            count++;
        }
        public bool Remove(double item)
        {
            Node current = head;
            Node previous = null;
            
            while (current != null)
            {
                if (current.Value == item)
                {
                    if (previous != null)
                    {
                        previous.Next = current.Next;
                        if (current.Next == null)
                            tail = previous;
                    }
                    else
                    {
                        head = head.Next;
                        if (head == null)
                            tail = null;
                    }
                    count--;
                    return true;
                }
                previous = current;
                current = current.Next;
            }
            return false;
        }
        public bool Contains(double item)
        {
            Node current = head;
            while (current != null)
            {
                if (current.Value == item)
                    return true;
                current = current.Next;
            }
            return false;
        }
        
        public void PrintList()
        {
            if (head == null)
                throw new ListUnderflow();
            Node current = head;
            while (current != null)
            {
                Console.Write(current.Value + " ");
                current = current.Next;
            }
            Console.WriteLine();
        }

        public override string ToString()
        {
            if (head == null)
                throw new ListUnderflow();
            StringBuilder PrintList = new StringBuilder();
            Node current = head;
            while (current != null)
            {
                PrintList.Append(current.Value + " ");
                current = current.Next;
            }
            return PrintList.ToString();
        }
//laba starts here
        public int Count()
        {
            //return count;
            if (head == null)
                throw new ListUnderflow();
            int cnt = 0;
            Node current = head;
            while (current != null)
            {
                cnt++;
                current = current.Next;
            }

            return cnt;
        }

        public bool IsEmpty()
        {
            if (head == null)
                return true;
            else return false;
        }
        
        public void Clear()
        {
            if (head == null)
                throw new ListUnderflow();
            Node current = head;
            Node next = head;
            while (next != tail)
            {
                next = current.Next;
                current = null;
            }

            tail = null;
            count = 0;
        }
}

namespace ConsoleApp12
{
    class Program
    {
        static void Main(string[] args)
        {

        }
    }
}
